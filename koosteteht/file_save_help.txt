<Window x:Class="Menut1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Menut1"
        xmlns:p="clr-namespace:Menut1.Properties"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="{x:Static p:Resources.menuFile}">
                <MenuItem x:Name="MenuOpen" Header="{x:Static p:Resources.menuOpen}" Click="MenuOpen_Click"/>
                <MenuItem x:Name="MenuSave" Header="{x:Static p:Resources.menuSave}" Click="MenuSave_Click"/>
                <MenuItem x:Name="MenuPrint" Header="{x:Static p:Resources.menuPrint}" Click="MenuPrint_Click"/>
                <Separator/>
                <MenuItem Header="{x:Static p:Resources.menuExit}" Command="{Binding ExitCommand}" Click="MenuItem_Click"/>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resources.menuEdit}">
                <MenuItem Header="{x:Static p:Resources.menuCopy}" Command="ApplicationCommands.Copy"/>
                <MenuItem Header="{x:Static p:Resources.menuPaste}" Command="ApplicationCommands.Paste"/>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resources.menuFormat}">
                <MenuItem x:Name="MenuFont" Header="{x:Static p:Resources.menuFont}" Click="MenuFont_Click"/>
            </MenuItem>
            <MenuItem Header="{x:Static p:Resources.menuHelp}">
                <MenuItem Header="{x:Static p:Resources.menuAbout}"/>
            </MenuItem>
        </Menu>
        <Grid x:Name="grid">
            <TextBox x:Name="textBox" TextWrapping="Wrap" Text="TextBox" AcceptsReturn="True" AcceptsTab="True" Style="{DynamicResource textBox_style}"/>
        </Grid>
    </DockPanel>
</Window>






using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.IO;

namespace Menut1
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public static string fileText;

        public MainWindow()
        {
            System.Threading.Thread.CurrentThread.CurrentUICulture =
            new System.Globalization.CultureInfo("sv-SE");
            InitializeComponent();
            fileText = textBox.Text;
        }

        // Exit
        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void MenuOpen_Click(object sender, RoutedEventArgs e)
        {

            Microsoft.Win32.OpenFileDialog ofd = new Microsoft.Win32.OpenFileDialog();
            ofd.Filter = "Text documents (.txt)|*.txt|All files (*.*)|*.*";
            if (ofd.ShowDialog() == true)
            { 
                //MessageBox.Show(ofd.FileName);
                Title = System.IO.Path.GetFileNameWithoutExtension(ofd.FileName);
                //MessageBox.Show(Title);
                fileText = File.ReadAllText(ofd.FileName);
                textBox.Text = fileText;
            }
        }

        private void MenuSave_Click(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.SaveFileDialog sfd = new Microsoft.Win32.SaveFileDialog();
            sfd.Filter = "Text documents (.txt)|*.txt";
            if (sfd.ShowDialog() == true)
            {
                StreamWriter writer = File.CreateText(sfd.FileName);
                writer.WriteLine(textBox.Text);
                writer.Close();
            }
        }

        private void MenuPrint_Click(object sender, RoutedEventArgs e)
        {
            PrintDialog printDialog = new PrintDialog();
            if (printDialog.ShowDialog() == true)
            {
                printDialog.PrintVisual(grid, fileText);
            }
        }

        private void MenuFont_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.MainWindow.FontSize = textBox.FontSize;
            Fonts window1 = new Fonts();
            window1.Show();
        }
    }
}






<Application x:Class="Menut1.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Menut1"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Style x:Key="textBox_style">
        </Style>
    </Application.Resources>
</Application>



https://stackoverflow.com/questions/6246009/inkcanvas-load-save-operations


            this.TestInkCanvas.Children.Clear();
            this.TestInkCanvas.Strokes.Clear();

MaxWidth="{Binding ActualWidth, ElementName=grid}" MaxHeight="{Binding ActualHeight, ElementName=grid}" Margin="0,0,-854,-732"/




System.Threading.Thread.CurrentThread.CurrentUICulture =
            new System.Globalization.CultureInfo("fi-FI");
Resources.fi-FI


            Form2 f33 = new Form2();
            f33.ShowDialog();
            if (f33.textBox1.Text == f33.textBox2.Text)
            {
                f33.Close();
            }
            else
            {
                TestInkCanvas.EditingMode = InkCanvasEditingMode.Select;
                Image i = new Image();
                BitmapImage src = new BitmapImage();
                src.BeginInit();
                src.UriSource = new Uri(f33.textBox1.Text, UriKind.Relative);
                src.CacheOption = BitmapCacheOption.OnLoad;
                src.EndInit();
                i.Source = src;
                i.Stretch = Stretch.Fill;
                i.Height = 50;
                i.Width = 50;
                this.TestInkCanvas.Children.Add(i);
                TestInkCanvas.Select(TestInkCanvas.Strokes, new UIElement[] { i });

            }



            RenderTargetBitmap rtb = new RenderTargetBitmap((int)this.TestInkCanvas.ActualWidth, (int)this.TestInkCanvas.ActualHeight, 0, 0, PixelFormats.Pbgra32);

            rtb.Render(TestInkCanvas);
            rtb.Render(sL);
            JpegBitmapEncoder encoder = new JpegBitmapEncoder();

            encoder.Frames.Add(BitmapFrame.Create(rtb));

            FileStream file = new FileStream("savplayer.dll", FileMode.Create);

            encoder.Save(file);

            file.Close();
            Form1 f1 = new Form1();
            f1.ShowDialog();